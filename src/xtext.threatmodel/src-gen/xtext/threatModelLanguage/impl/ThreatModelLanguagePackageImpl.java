/**
 * generated by Xtext 2.33.0
 */
package xtext.threatModelLanguage.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import xtext.threatModelLanguage.Add;
import xtext.threatModelLanguage.AddBoundary;
import xtext.threatModelLanguage.AddDatastore;
import xtext.threatModelLanguage.AddEntity;
import xtext.threatModelLanguage.AddExternal;
import xtext.threatModelLanguage.AddFlow;
import xtext.threatModelLanguage.AddProcess;
import xtext.threatModelLanguage.BoundaryAddEntity;
import xtext.threatModelLanguage.BoundaryRemoveEntity;
import xtext.threatModelLanguage.ChangeDescription;
import xtext.threatModelLanguage.Countermeasure;
import xtext.threatModelLanguage.Design;
import xtext.threatModelLanguage.FlowDestination;
import xtext.threatModelLanguage.FlowFix;
import xtext.threatModelLanguage.FlowSource;
import xtext.threatModelLanguage.Grouping;
import xtext.threatModelLanguage.MergeEntity;
import xtext.threatModelLanguage.MergeIntoDatastore;
import xtext.threatModelLanguage.MergeIntoExternal;
import xtext.threatModelLanguage.MergeIntoProcess;
import xtext.threatModelLanguage.Model;
import xtext.threatModelLanguage.Modify;
import xtext.threatModelLanguage.Operations;
import xtext.threatModelLanguage.ReID;
import xtext.threatModelLanguage.Refactoring;
import xtext.threatModelLanguage.Remove;
import xtext.threatModelLanguage.Rename;
import xtext.threatModelLanguage.RotateFlow;
import xtext.threatModelLanguage.Sketching;
import xtext.threatModelLanguage.SplitDatastoreAndDatastore;
import xtext.threatModelLanguage.SplitDatastoreAndExternal;
import xtext.threatModelLanguage.SplitEntity;
import xtext.threatModelLanguage.SplitExternalAndDatastore;
import xtext.threatModelLanguage.SplitExternalAndExternal;
import xtext.threatModelLanguage.SplitExternalAndProcess;
import xtext.threatModelLanguage.SplitProcessAndExternal;
import xtext.threatModelLanguage.SplitProcessAndProcess;
import xtext.threatModelLanguage.SplitsDatastoreAndProcess;
import xtext.threatModelLanguage.SplitsProcessAndDatastore;
import xtext.threatModelLanguage.Statements;
import xtext.threatModelLanguage.Testing;
import xtext.threatModelLanguage.ThreatModelLanguageFactory;
import xtext.threatModelLanguage.ThreatModelLanguagePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ThreatModelLanguagePackageImpl extends EPackageImpl implements ThreatModelLanguagePackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass operationsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass addEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass addEntityEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass addProcessEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass addExternalEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass addDatastoreEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass addFlowEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass addBoundaryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass removeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modifyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass renameEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass reIDEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass changeDescriptionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass flowSourceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass flowDestinationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass boundaryAddEntityEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass boundaryRemoveEntityEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rotateFlowEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mergeEntityEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mergeIntoProcessEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mergeIntoExternalEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mergeIntoDatastoreEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass splitEntityEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass flowFixEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass splitProcessAndProcessEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass splitsProcessAndDatastoreEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass splitsDatastoreAndProcessEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass splitProcessAndExternalEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass splitExternalAndProcessEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass splitDatastoreAndExternalEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass splitExternalAndDatastoreEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass splitDatastoreAndDatastoreEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass splitExternalAndExternalEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass groupingEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass countermeasureEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass designEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass refactoringEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass testingEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sketchingEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see xtext.threatModelLanguage.ThreatModelLanguagePackage#eNS_URI
   * @see #init()
   * @generated
   */
  private ThreatModelLanguagePackageImpl()
  {
    super(eNS_URI, ThreatModelLanguageFactory.eINSTANCE);
  }
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link ThreatModelLanguagePackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static ThreatModelLanguagePackage init()
  {
    if (isInited) return (ThreatModelLanguagePackage)EPackage.Registry.INSTANCE.getEPackage(ThreatModelLanguagePackage.eNS_URI);

    // Obtain or create and register package
    Object registeredThreatModelLanguagePackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    ThreatModelLanguagePackageImpl theThreatModelLanguagePackage = registeredThreatModelLanguagePackage instanceof ThreatModelLanguagePackageImpl ? (ThreatModelLanguagePackageImpl)registeredThreatModelLanguagePackage : new ThreatModelLanguagePackageImpl();

    isInited = true;

    // Create package meta-data objects
    theThreatModelLanguagePackage.createPackageContents();

    // Initialize created meta-data
    theThreatModelLanguagePackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theThreatModelLanguagePackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(ThreatModelLanguagePackage.eNS_URI, theThreatModelLanguagePackage);
    return theThreatModelLanguagePackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModel()
  {
    return modelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModel_Elements()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStatements()
  {
    return statementsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOperations()
  {
    return operationsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOperations_Id()
  {
    return (EAttribute)operationsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOperations_Documentation()
  {
    return (EAttribute)operationsEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAdd()
  {
    return addEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAdd_Name()
  {
    return (EAttribute)addEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAdd_Description()
  {
    return (EAttribute)addEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAddEntity()
  {
    return addEntityEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAddProcess()
  {
    return addProcessEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAddExternal()
  {
    return addExternalEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAddDatastore()
  {
    return addDatastoreEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAddFlow()
  {
    return addFlowEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAddFlow_SourceId()
  {
    return (EAttribute)addFlowEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAddFlow_DestinationId()
  {
    return (EAttribute)addFlowEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAddBoundary()
  {
    return addBoundaryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAddBoundary_Entities()
  {
    return (EAttribute)addBoundaryEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRemove()
  {
    return removeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModify()
  {
    return modifyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRename()
  {
    return renameEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRename_NewName()
  {
    return (EAttribute)renameEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getReID()
  {
    return reIDEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getReID_NewId()
  {
    return (EAttribute)reIDEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getChangeDescription()
  {
    return changeDescriptionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getChangeDescription_Description()
  {
    return (EAttribute)changeDescriptionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFlowSource()
  {
    return flowSourceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFlowSource_Source()
  {
    return (EAttribute)flowSourceEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFlowDestination()
  {
    return flowDestinationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFlowDestination_Destination()
  {
    return (EAttribute)flowDestinationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBoundaryAddEntity()
  {
    return boundaryAddEntityEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBoundaryAddEntity_NewEntity()
  {
    return (EAttribute)boundaryAddEntityEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBoundaryRemoveEntity()
  {
    return boundaryRemoveEntityEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBoundaryRemoveEntity_OldEntity()
  {
    return (EAttribute)boundaryRemoveEntityEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRotateFlow()
  {
    return rotateFlowEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMergeEntity()
  {
    return mergeEntityEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMergeEntity_Entity1()
  {
    return (EAttribute)mergeEntityEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMergeEntity_Entity2()
  {
    return (EAttribute)mergeEntityEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMergeEntity_Name()
  {
    return (EAttribute)mergeEntityEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMergeEntity_Description()
  {
    return (EAttribute)mergeEntityEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMergeIntoProcess()
  {
    return mergeIntoProcessEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMergeIntoExternal()
  {
    return mergeIntoExternalEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMergeIntoDatastore()
  {
    return mergeIntoDatastoreEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSplitEntity()
  {
    return splitEntityEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSplitEntity_Entity1()
  {
    return (EAttribute)splitEntityEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSplitEntity_Entity1Name()
  {
    return (EAttribute)splitEntityEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSplitEntity_Entity1Description()
  {
    return (EAttribute)splitEntityEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSplitEntity_Entity2()
  {
    return (EAttribute)splitEntityEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSplitEntity_Entity2Name()
  {
    return (EAttribute)splitEntityEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSplitEntity_Entity2Description()
  {
    return (EAttribute)splitEntityEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSplitEntity_FlowFix()
  {
    return (EReference)splitEntityEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFlowFix()
  {
    return flowFixEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFlowFix_FlowId()
  {
    return (EAttribute)flowFixEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFlowFix_EntityId()
  {
    return (EAttribute)flowFixEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSplitProcessAndProcess()
  {
    return splitProcessAndProcessEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSplitsProcessAndDatastore()
  {
    return splitsProcessAndDatastoreEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSplitsDatastoreAndProcess()
  {
    return splitsDatastoreAndProcessEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSplitProcessAndExternal()
  {
    return splitProcessAndExternalEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSplitExternalAndProcess()
  {
    return splitExternalAndProcessEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSplitDatastoreAndExternal()
  {
    return splitDatastoreAndExternalEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSplitExternalAndDatastore()
  {
    return splitExternalAndDatastoreEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSplitDatastoreAndDatastore()
  {
    return splitDatastoreAndDatastoreEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSplitExternalAndExternal()
  {
    return splitExternalAndExternalEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getGrouping()
  {
    return groupingEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGrouping_Name()
  {
    return (EAttribute)groupingEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGrouping_Description()
  {
    return (EAttribute)groupingEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getGrouping_Operatoins()
  {
    return (EReference)groupingEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCountermeasure()
  {
    return countermeasureEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDesign()
  {
    return designEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRefactoring()
  {
    return refactoringEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTesting()
  {
    return testingEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTesting_Name()
  {
    return (EAttribute)testingEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTesting_Description()
  {
    return (EAttribute)testingEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTesting_Operatoins()
  {
    return (EReference)testingEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSketching()
  {
    return sketchingEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSketching_Name()
  {
    return (EAttribute)sketchingEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSketching_Description()
  {
    return (EAttribute)sketchingEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSketching_Operatoins()
  {
    return (EReference)sketchingEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ThreatModelLanguageFactory getThreatModelLanguageFactory()
  {
    return (ThreatModelLanguageFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    modelEClass = createEClass(MODEL);
    createEReference(modelEClass, MODEL__ELEMENTS);

    statementsEClass = createEClass(STATEMENTS);

    operationsEClass = createEClass(OPERATIONS);
    createEAttribute(operationsEClass, OPERATIONS__ID);
    createEAttribute(operationsEClass, OPERATIONS__DOCUMENTATION);

    addEClass = createEClass(ADD);
    createEAttribute(addEClass, ADD__NAME);
    createEAttribute(addEClass, ADD__DESCRIPTION);

    addEntityEClass = createEClass(ADD_ENTITY);

    addProcessEClass = createEClass(ADD_PROCESS);

    addExternalEClass = createEClass(ADD_EXTERNAL);

    addDatastoreEClass = createEClass(ADD_DATASTORE);

    addFlowEClass = createEClass(ADD_FLOW);
    createEAttribute(addFlowEClass, ADD_FLOW__SOURCE_ID);
    createEAttribute(addFlowEClass, ADD_FLOW__DESTINATION_ID);

    addBoundaryEClass = createEClass(ADD_BOUNDARY);
    createEAttribute(addBoundaryEClass, ADD_BOUNDARY__ENTITIES);

    removeEClass = createEClass(REMOVE);

    modifyEClass = createEClass(MODIFY);

    renameEClass = createEClass(RENAME);
    createEAttribute(renameEClass, RENAME__NEW_NAME);

    reIDEClass = createEClass(RE_ID);
    createEAttribute(reIDEClass, RE_ID__NEW_ID);

    changeDescriptionEClass = createEClass(CHANGE_DESCRIPTION);
    createEAttribute(changeDescriptionEClass, CHANGE_DESCRIPTION__DESCRIPTION);

    flowSourceEClass = createEClass(FLOW_SOURCE);
    createEAttribute(flowSourceEClass, FLOW_SOURCE__SOURCE);

    flowDestinationEClass = createEClass(FLOW_DESTINATION);
    createEAttribute(flowDestinationEClass, FLOW_DESTINATION__DESTINATION);

    boundaryAddEntityEClass = createEClass(BOUNDARY_ADD_ENTITY);
    createEAttribute(boundaryAddEntityEClass, BOUNDARY_ADD_ENTITY__NEW_ENTITY);

    boundaryRemoveEntityEClass = createEClass(BOUNDARY_REMOVE_ENTITY);
    createEAttribute(boundaryRemoveEntityEClass, BOUNDARY_REMOVE_ENTITY__OLD_ENTITY);

    rotateFlowEClass = createEClass(ROTATE_FLOW);

    mergeEntityEClass = createEClass(MERGE_ENTITY);
    createEAttribute(mergeEntityEClass, MERGE_ENTITY__ENTITY1);
    createEAttribute(mergeEntityEClass, MERGE_ENTITY__ENTITY2);
    createEAttribute(mergeEntityEClass, MERGE_ENTITY__NAME);
    createEAttribute(mergeEntityEClass, MERGE_ENTITY__DESCRIPTION);

    mergeIntoProcessEClass = createEClass(MERGE_INTO_PROCESS);

    mergeIntoExternalEClass = createEClass(MERGE_INTO_EXTERNAL);

    mergeIntoDatastoreEClass = createEClass(MERGE_INTO_DATASTORE);

    splitEntityEClass = createEClass(SPLIT_ENTITY);
    createEAttribute(splitEntityEClass, SPLIT_ENTITY__ENTITY1);
    createEAttribute(splitEntityEClass, SPLIT_ENTITY__ENTITY1_NAME);
    createEAttribute(splitEntityEClass, SPLIT_ENTITY__ENTITY1_DESCRIPTION);
    createEAttribute(splitEntityEClass, SPLIT_ENTITY__ENTITY2);
    createEAttribute(splitEntityEClass, SPLIT_ENTITY__ENTITY2_NAME);
    createEAttribute(splitEntityEClass, SPLIT_ENTITY__ENTITY2_DESCRIPTION);
    createEReference(splitEntityEClass, SPLIT_ENTITY__FLOW_FIX);

    flowFixEClass = createEClass(FLOW_FIX);
    createEAttribute(flowFixEClass, FLOW_FIX__FLOW_ID);
    createEAttribute(flowFixEClass, FLOW_FIX__ENTITY_ID);

    splitProcessAndProcessEClass = createEClass(SPLIT_PROCESS_AND_PROCESS);

    splitsProcessAndDatastoreEClass = createEClass(SPLITS_PROCESS_AND_DATASTORE);

    splitsDatastoreAndProcessEClass = createEClass(SPLITS_DATASTORE_AND_PROCESS);

    splitProcessAndExternalEClass = createEClass(SPLIT_PROCESS_AND_EXTERNAL);

    splitExternalAndProcessEClass = createEClass(SPLIT_EXTERNAL_AND_PROCESS);

    splitDatastoreAndExternalEClass = createEClass(SPLIT_DATASTORE_AND_EXTERNAL);

    splitExternalAndDatastoreEClass = createEClass(SPLIT_EXTERNAL_AND_DATASTORE);

    splitDatastoreAndDatastoreEClass = createEClass(SPLIT_DATASTORE_AND_DATASTORE);

    splitExternalAndExternalEClass = createEClass(SPLIT_EXTERNAL_AND_EXTERNAL);

    groupingEClass = createEClass(GROUPING);
    createEAttribute(groupingEClass, GROUPING__NAME);
    createEAttribute(groupingEClass, GROUPING__DESCRIPTION);
    createEReference(groupingEClass, GROUPING__OPERATOINS);

    countermeasureEClass = createEClass(COUNTERMEASURE);

    designEClass = createEClass(DESIGN);

    refactoringEClass = createEClass(REFACTORING);

    testingEClass = createEClass(TESTING);
    createEAttribute(testingEClass, TESTING__NAME);
    createEAttribute(testingEClass, TESTING__DESCRIPTION);
    createEReference(testingEClass, TESTING__OPERATOINS);

    sketchingEClass = createEClass(SKETCHING);
    createEAttribute(sketchingEClass, SKETCHING__NAME);
    createEAttribute(sketchingEClass, SKETCHING__DESCRIPTION);
    createEReference(sketchingEClass, SKETCHING__OPERATOINS);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    operationsEClass.getESuperTypes().add(this.getStatements());
    addEClass.getESuperTypes().add(this.getOperations());
    addEntityEClass.getESuperTypes().add(this.getAdd());
    addProcessEClass.getESuperTypes().add(this.getAddEntity());
    addExternalEClass.getESuperTypes().add(this.getAddEntity());
    addDatastoreEClass.getESuperTypes().add(this.getAddEntity());
    addFlowEClass.getESuperTypes().add(this.getAdd());
    addBoundaryEClass.getESuperTypes().add(this.getAdd());
    removeEClass.getESuperTypes().add(this.getOperations());
    modifyEClass.getESuperTypes().add(this.getOperations());
    renameEClass.getESuperTypes().add(this.getModify());
    reIDEClass.getESuperTypes().add(this.getModify());
    changeDescriptionEClass.getESuperTypes().add(this.getModify());
    flowSourceEClass.getESuperTypes().add(this.getModify());
    flowDestinationEClass.getESuperTypes().add(this.getModify());
    boundaryAddEntityEClass.getESuperTypes().add(this.getModify());
    boundaryRemoveEntityEClass.getESuperTypes().add(this.getModify());
    rotateFlowEClass.getESuperTypes().add(this.getModify());
    mergeEntityEClass.getESuperTypes().add(this.getModify());
    mergeIntoProcessEClass.getESuperTypes().add(this.getMergeEntity());
    mergeIntoExternalEClass.getESuperTypes().add(this.getMergeEntity());
    mergeIntoDatastoreEClass.getESuperTypes().add(this.getMergeEntity());
    splitEntityEClass.getESuperTypes().add(this.getModify());
    splitProcessAndProcessEClass.getESuperTypes().add(this.getSplitEntity());
    splitsProcessAndDatastoreEClass.getESuperTypes().add(this.getSplitEntity());
    splitsDatastoreAndProcessEClass.getESuperTypes().add(this.getSplitEntity());
    splitProcessAndExternalEClass.getESuperTypes().add(this.getSplitEntity());
    splitExternalAndProcessEClass.getESuperTypes().add(this.getSplitEntity());
    splitDatastoreAndExternalEClass.getESuperTypes().add(this.getSplitEntity());
    splitExternalAndDatastoreEClass.getESuperTypes().add(this.getSplitEntity());
    splitDatastoreAndDatastoreEClass.getESuperTypes().add(this.getSplitEntity());
    splitExternalAndExternalEClass.getESuperTypes().add(this.getSplitEntity());
    groupingEClass.getESuperTypes().add(this.getStatements());
    countermeasureEClass.getESuperTypes().add(this.getGrouping());
    designEClass.getESuperTypes().add(this.getGrouping());
    refactoringEClass.getESuperTypes().add(this.getGrouping());

    // Initialize classes and features; add operations and parameters
    initEClass(modelEClass, Model.class, "Model", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getModel_Elements(), this.getStatements(), null, "elements", null, 0, -1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementsEClass, Statements.class, "Statements", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(operationsEClass, Operations.class, "Operations", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getOperations_Id(), ecorePackage.getEString(), "id", null, 0, 1, Operations.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOperations_Documentation(), ecorePackage.getEString(), "documentation", null, 0, 1, Operations.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(addEClass, Add.class, "Add", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAdd_Name(), ecorePackage.getEString(), "name", null, 0, 1, Add.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAdd_Description(), ecorePackage.getEString(), "description", null, 0, 1, Add.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(addEntityEClass, AddEntity.class, "AddEntity", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(addProcessEClass, AddProcess.class, "AddProcess", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(addExternalEClass, AddExternal.class, "AddExternal", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(addDatastoreEClass, AddDatastore.class, "AddDatastore", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(addFlowEClass, AddFlow.class, "AddFlow", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAddFlow_SourceId(), ecorePackage.getEString(), "sourceId", null, 0, 1, AddFlow.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAddFlow_DestinationId(), ecorePackage.getEString(), "destinationId", null, 0, 1, AddFlow.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(addBoundaryEClass, AddBoundary.class, "AddBoundary", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAddBoundary_Entities(), ecorePackage.getEString(), "entities", null, 0, -1, AddBoundary.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(removeEClass, Remove.class, "Remove", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(modifyEClass, Modify.class, "Modify", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(renameEClass, Rename.class, "Rename", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRename_NewName(), ecorePackage.getEString(), "newName", null, 0, 1, Rename.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(reIDEClass, ReID.class, "ReID", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getReID_NewId(), ecorePackage.getEString(), "newId", null, 0, 1, ReID.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(changeDescriptionEClass, ChangeDescription.class, "ChangeDescription", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getChangeDescription_Description(), ecorePackage.getEString(), "description", null, 0, 1, ChangeDescription.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(flowSourceEClass, FlowSource.class, "FlowSource", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFlowSource_Source(), ecorePackage.getEString(), "source", null, 0, 1, FlowSource.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(flowDestinationEClass, FlowDestination.class, "FlowDestination", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFlowDestination_Destination(), ecorePackage.getEString(), "destination", null, 0, 1, FlowDestination.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(boundaryAddEntityEClass, BoundaryAddEntity.class, "BoundaryAddEntity", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBoundaryAddEntity_NewEntity(), ecorePackage.getEString(), "newEntity", null, 0, 1, BoundaryAddEntity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(boundaryRemoveEntityEClass, BoundaryRemoveEntity.class, "BoundaryRemoveEntity", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBoundaryRemoveEntity_OldEntity(), ecorePackage.getEString(), "oldEntity", null, 0, 1, BoundaryRemoveEntity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rotateFlowEClass, RotateFlow.class, "RotateFlow", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(mergeEntityEClass, MergeEntity.class, "MergeEntity", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMergeEntity_Entity1(), ecorePackage.getEString(), "entity1", null, 0, 1, MergeEntity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMergeEntity_Entity2(), ecorePackage.getEString(), "entity2", null, 0, 1, MergeEntity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMergeEntity_Name(), ecorePackage.getEString(), "name", null, 0, 1, MergeEntity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMergeEntity_Description(), ecorePackage.getEString(), "description", null, 0, 1, MergeEntity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mergeIntoProcessEClass, MergeIntoProcess.class, "MergeIntoProcess", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(mergeIntoExternalEClass, MergeIntoExternal.class, "MergeIntoExternal", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(mergeIntoDatastoreEClass, MergeIntoDatastore.class, "MergeIntoDatastore", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(splitEntityEClass, SplitEntity.class, "SplitEntity", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSplitEntity_Entity1(), ecorePackage.getEString(), "entity1", null, 0, 1, SplitEntity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSplitEntity_Entity1Name(), ecorePackage.getEString(), "entity1Name", null, 0, 1, SplitEntity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSplitEntity_Entity1Description(), ecorePackage.getEString(), "entity1Description", null, 0, 1, SplitEntity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSplitEntity_Entity2(), ecorePackage.getEString(), "entity2", null, 0, 1, SplitEntity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSplitEntity_Entity2Name(), ecorePackage.getEString(), "entity2Name", null, 0, 1, SplitEntity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSplitEntity_Entity2Description(), ecorePackage.getEString(), "entity2Description", null, 0, 1, SplitEntity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSplitEntity_FlowFix(), this.getFlowFix(), null, "flowFix", null, 0, -1, SplitEntity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(flowFixEClass, FlowFix.class, "FlowFix", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFlowFix_FlowId(), ecorePackage.getEString(), "flowId", null, 0, 1, FlowFix.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getFlowFix_EntityId(), ecorePackage.getEString(), "entityId", null, 0, 1, FlowFix.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(splitProcessAndProcessEClass, SplitProcessAndProcess.class, "SplitProcessAndProcess", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(splitsProcessAndDatastoreEClass, SplitsProcessAndDatastore.class, "SplitsProcessAndDatastore", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(splitsDatastoreAndProcessEClass, SplitsDatastoreAndProcess.class, "SplitsDatastoreAndProcess", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(splitProcessAndExternalEClass, SplitProcessAndExternal.class, "SplitProcessAndExternal", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(splitExternalAndProcessEClass, SplitExternalAndProcess.class, "SplitExternalAndProcess", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(splitDatastoreAndExternalEClass, SplitDatastoreAndExternal.class, "SplitDatastoreAndExternal", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(splitExternalAndDatastoreEClass, SplitExternalAndDatastore.class, "SplitExternalAndDatastore", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(splitDatastoreAndDatastoreEClass, SplitDatastoreAndDatastore.class, "SplitDatastoreAndDatastore", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(splitExternalAndExternalEClass, SplitExternalAndExternal.class, "SplitExternalAndExternal", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(groupingEClass, Grouping.class, "Grouping", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getGrouping_Name(), ecorePackage.getEString(), "name", null, 0, 1, Grouping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getGrouping_Description(), ecorePackage.getEString(), "description", null, 0, 1, Grouping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getGrouping_Operatoins(), this.getOperations(), null, "operatoins", null, 0, -1, Grouping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(countermeasureEClass, Countermeasure.class, "Countermeasure", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(designEClass, Design.class, "Design", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(refactoringEClass, Refactoring.class, "Refactoring", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(testingEClass, Testing.class, "Testing", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTesting_Name(), ecorePackage.getEString(), "name", null, 0, 1, Testing.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTesting_Description(), ecorePackage.getEString(), "description", null, 0, 1, Testing.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTesting_Operatoins(), this.getOperations(), null, "operatoins", null, 0, -1, Testing.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(sketchingEClass, Sketching.class, "Sketching", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSketching_Name(), ecorePackage.getEString(), "name", null, 0, 1, Sketching.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSketching_Description(), ecorePackage.getEString(), "description", null, 0, 1, Sketching.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSketching_Operatoins(), this.getOperations(), null, "operatoins", null, 0, -1, Sketching.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Create resource
    createResource(eNS_URI);
  }

} //ThreatModelLanguagePackageImpl
