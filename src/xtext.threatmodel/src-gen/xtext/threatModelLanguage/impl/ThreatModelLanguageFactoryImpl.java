/**
 * generated by Xtext 2.33.0
 */
package xtext.threatModelLanguage.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import xtext.threatModelLanguage.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ThreatModelLanguageFactoryImpl extends EFactoryImpl implements ThreatModelLanguageFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ThreatModelLanguageFactory init()
  {
    try
    {
      ThreatModelLanguageFactory theThreatModelLanguageFactory = (ThreatModelLanguageFactory)EPackage.Registry.INSTANCE.getEFactory(ThreatModelLanguagePackage.eNS_URI);
      if (theThreatModelLanguageFactory != null)
      {
        return theThreatModelLanguageFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ThreatModelLanguageFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ThreatModelLanguageFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ThreatModelLanguagePackage.MODEL: return createModel();
      case ThreatModelLanguagePackage.STATEMENTS: return createStatements();
      case ThreatModelLanguagePackage.OPERATIONS: return createOperations();
      case ThreatModelLanguagePackage.ADD: return createAdd();
      case ThreatModelLanguagePackage.ADD_ENTITY: return createAddEntity();
      case ThreatModelLanguagePackage.ADD_PROCESS: return createAddProcess();
      case ThreatModelLanguagePackage.ADD_EXTERNAL: return createAddExternal();
      case ThreatModelLanguagePackage.ADD_DATASTORE: return createAddDatastore();
      case ThreatModelLanguagePackage.ADD_FLOW: return createAddFlow();
      case ThreatModelLanguagePackage.ADD_BOUNDARY: return createAddBoundary();
      case ThreatModelLanguagePackage.REMOVE: return createRemove();
      case ThreatModelLanguagePackage.MODIFY: return createModify();
      case ThreatModelLanguagePackage.RENAME: return createRename();
      case ThreatModelLanguagePackage.RE_ID: return createReID();
      case ThreatModelLanguagePackage.CHANGE_DESCRIPTION: return createChangeDescription();
      case ThreatModelLanguagePackage.FLOW_SOURCE: return createFlowSource();
      case ThreatModelLanguagePackage.FLOW_DESTINATION: return createFlowDestination();
      case ThreatModelLanguagePackage.BOUNDARY_ADD_ENTITY: return createBoundaryAddEntity();
      case ThreatModelLanguagePackage.BOUNDARY_REMOVE_ENTITY: return createBoundaryRemoveEntity();
      case ThreatModelLanguagePackage.ROTATE_FLOW: return createRotateFlow();
      case ThreatModelLanguagePackage.MERGE_ENTITY: return createMergeEntity();
      case ThreatModelLanguagePackage.MERGE_INTO_PROCESS: return createMergeIntoProcess();
      case ThreatModelLanguagePackage.MERGE_INTO_EXTERNAL: return createMergeIntoExternal();
      case ThreatModelLanguagePackage.MERGE_INTO_DATASTORE: return createMergeIntoDatastore();
      case ThreatModelLanguagePackage.SPLIT_ENTITY: return createSplitEntity();
      case ThreatModelLanguagePackage.FLOW_FIX: return createFlowFix();
      case ThreatModelLanguagePackage.SPLIT_PROCESS_AND_PROCESS: return createSplitProcessAndProcess();
      case ThreatModelLanguagePackage.SPLITS_PROCESS_AND_DATASTORE: return createSplitsProcessAndDatastore();
      case ThreatModelLanguagePackage.SPLITS_DATASTORE_AND_PROCESS: return createSplitsDatastoreAndProcess();
      case ThreatModelLanguagePackage.SPLIT_PROCESS_AND_EXTERNAL: return createSplitProcessAndExternal();
      case ThreatModelLanguagePackage.SPLIT_EXTERNAL_AND_PROCESS: return createSplitExternalAndProcess();
      case ThreatModelLanguagePackage.SPLIT_DATASTORE_AND_EXTERNAL: return createSplitDatastoreAndExternal();
      case ThreatModelLanguagePackage.SPLIT_EXTERNAL_AND_DATASTORE: return createSplitExternalAndDatastore();
      case ThreatModelLanguagePackage.SPLIT_DATASTORE_AND_DATASTORE: return createSplitDatastoreAndDatastore();
      case ThreatModelLanguagePackage.SPLIT_EXTERNAL_AND_EXTERNAL: return createSplitExternalAndExternal();
      case ThreatModelLanguagePackage.GROUPING: return createGrouping();
      case ThreatModelLanguagePackage.COUNTERMEASURE: return createCountermeasure();
      case ThreatModelLanguagePackage.DESIGN: return createDesign();
      case ThreatModelLanguagePackage.REFACTORING: return createRefactoring();
      case ThreatModelLanguagePackage.TESTING: return createTesting();
      case ThreatModelLanguagePackage.SKETCHING: return createSketching();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statements createStatements()
  {
    StatementsImpl statements = new StatementsImpl();
    return statements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operations createOperations()
  {
    OperationsImpl operations = new OperationsImpl();
    return operations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Add createAdd()
  {
    AddImpl add = new AddImpl();
    return add;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddEntity createAddEntity()
  {
    AddEntityImpl addEntity = new AddEntityImpl();
    return addEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddProcess createAddProcess()
  {
    AddProcessImpl addProcess = new AddProcessImpl();
    return addProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddExternal createAddExternal()
  {
    AddExternalImpl addExternal = new AddExternalImpl();
    return addExternal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddDatastore createAddDatastore()
  {
    AddDatastoreImpl addDatastore = new AddDatastoreImpl();
    return addDatastore;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddFlow createAddFlow()
  {
    AddFlowImpl addFlow = new AddFlowImpl();
    return addFlow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddBoundary createAddBoundary()
  {
    AddBoundaryImpl addBoundary = new AddBoundaryImpl();
    return addBoundary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Remove createRemove()
  {
    RemoveImpl remove = new RemoveImpl();
    return remove;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Modify createModify()
  {
    ModifyImpl modify = new ModifyImpl();
    return modify;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rename createRename()
  {
    RenameImpl rename = new RenameImpl();
    return rename;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReID createReID()
  {
    ReIDImpl reID = new ReIDImpl();
    return reID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChangeDescription createChangeDescription()
  {
    ChangeDescriptionImpl changeDescription = new ChangeDescriptionImpl();
    return changeDescription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FlowSource createFlowSource()
  {
    FlowSourceImpl flowSource = new FlowSourceImpl();
    return flowSource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FlowDestination createFlowDestination()
  {
    FlowDestinationImpl flowDestination = new FlowDestinationImpl();
    return flowDestination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoundaryAddEntity createBoundaryAddEntity()
  {
    BoundaryAddEntityImpl boundaryAddEntity = new BoundaryAddEntityImpl();
    return boundaryAddEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoundaryRemoveEntity createBoundaryRemoveEntity()
  {
    BoundaryRemoveEntityImpl boundaryRemoveEntity = new BoundaryRemoveEntityImpl();
    return boundaryRemoveEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RotateFlow createRotateFlow()
  {
    RotateFlowImpl rotateFlow = new RotateFlowImpl();
    return rotateFlow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MergeEntity createMergeEntity()
  {
    MergeEntityImpl mergeEntity = new MergeEntityImpl();
    return mergeEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MergeIntoProcess createMergeIntoProcess()
  {
    MergeIntoProcessImpl mergeIntoProcess = new MergeIntoProcessImpl();
    return mergeIntoProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MergeIntoExternal createMergeIntoExternal()
  {
    MergeIntoExternalImpl mergeIntoExternal = new MergeIntoExternalImpl();
    return mergeIntoExternal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MergeIntoDatastore createMergeIntoDatastore()
  {
    MergeIntoDatastoreImpl mergeIntoDatastore = new MergeIntoDatastoreImpl();
    return mergeIntoDatastore;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SplitEntity createSplitEntity()
  {
    SplitEntityImpl splitEntity = new SplitEntityImpl();
    return splitEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FlowFix createFlowFix()
  {
    FlowFixImpl flowFix = new FlowFixImpl();
    return flowFix;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SplitProcessAndProcess createSplitProcessAndProcess()
  {
    SplitProcessAndProcessImpl splitProcessAndProcess = new SplitProcessAndProcessImpl();
    return splitProcessAndProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SplitsProcessAndDatastore createSplitsProcessAndDatastore()
  {
    SplitsProcessAndDatastoreImpl splitsProcessAndDatastore = new SplitsProcessAndDatastoreImpl();
    return splitsProcessAndDatastore;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SplitsDatastoreAndProcess createSplitsDatastoreAndProcess()
  {
    SplitsDatastoreAndProcessImpl splitsDatastoreAndProcess = new SplitsDatastoreAndProcessImpl();
    return splitsDatastoreAndProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SplitProcessAndExternal createSplitProcessAndExternal()
  {
    SplitProcessAndExternalImpl splitProcessAndExternal = new SplitProcessAndExternalImpl();
    return splitProcessAndExternal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SplitExternalAndProcess createSplitExternalAndProcess()
  {
    SplitExternalAndProcessImpl splitExternalAndProcess = new SplitExternalAndProcessImpl();
    return splitExternalAndProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SplitDatastoreAndExternal createSplitDatastoreAndExternal()
  {
    SplitDatastoreAndExternalImpl splitDatastoreAndExternal = new SplitDatastoreAndExternalImpl();
    return splitDatastoreAndExternal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SplitExternalAndDatastore createSplitExternalAndDatastore()
  {
    SplitExternalAndDatastoreImpl splitExternalAndDatastore = new SplitExternalAndDatastoreImpl();
    return splitExternalAndDatastore;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SplitDatastoreAndDatastore createSplitDatastoreAndDatastore()
  {
    SplitDatastoreAndDatastoreImpl splitDatastoreAndDatastore = new SplitDatastoreAndDatastoreImpl();
    return splitDatastoreAndDatastore;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SplitExternalAndExternal createSplitExternalAndExternal()
  {
    SplitExternalAndExternalImpl splitExternalAndExternal = new SplitExternalAndExternalImpl();
    return splitExternalAndExternal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Grouping createGrouping()
  {
    GroupingImpl grouping = new GroupingImpl();
    return grouping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Countermeasure createCountermeasure()
  {
    CountermeasureImpl countermeasure = new CountermeasureImpl();
    return countermeasure;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Design createDesign()
  {
    DesignImpl design = new DesignImpl();
    return design;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Refactoring createRefactoring()
  {
    RefactoringImpl refactoring = new RefactoringImpl();
    return refactoring;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Testing createTesting()
  {
    TestingImpl testing = new TestingImpl();
    return testing;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sketching createSketching()
  {
    SketchingImpl sketching = new SketchingImpl();
    return sketching;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ThreatModelLanguagePackage getThreatModelLanguagePackage()
  {
    return (ThreatModelLanguagePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ThreatModelLanguagePackage getPackage()
  {
    return ThreatModelLanguagePackage.eINSTANCE;
  }

} //ThreatModelLanguageFactoryImpl
