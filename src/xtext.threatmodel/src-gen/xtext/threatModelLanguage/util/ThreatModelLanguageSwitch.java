/**
 * generated by Xtext 2.33.0
 */
package xtext.threatModelLanguage.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import xtext.threatModelLanguage.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see xtext.threatModelLanguage.ThreatModelLanguagePackage
 * @generated
 */
public class ThreatModelLanguageSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ThreatModelLanguagePackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ThreatModelLanguageSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = ThreatModelLanguagePackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case ThreatModelLanguagePackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.STATEMENTS:
      {
        Statements statements = (Statements)theEObject;
        T result = caseStatements(statements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.OPERATIONS:
      {
        Operations operations = (Operations)theEObject;
        T result = caseOperations(operations);
        if (result == null) result = caseStatements(operations);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.ADD:
      {
        Add add = (Add)theEObject;
        T result = caseAdd(add);
        if (result == null) result = caseOperations(add);
        if (result == null) result = caseStatements(add);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.ADD_ENTITY:
      {
        AddEntity addEntity = (AddEntity)theEObject;
        T result = caseAddEntity(addEntity);
        if (result == null) result = caseAdd(addEntity);
        if (result == null) result = caseOperations(addEntity);
        if (result == null) result = caseStatements(addEntity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.ADD_PROCESS:
      {
        AddProcess addProcess = (AddProcess)theEObject;
        T result = caseAddProcess(addProcess);
        if (result == null) result = caseAddEntity(addProcess);
        if (result == null) result = caseAdd(addProcess);
        if (result == null) result = caseOperations(addProcess);
        if (result == null) result = caseStatements(addProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.ADD_EXTERNAL:
      {
        AddExternal addExternal = (AddExternal)theEObject;
        T result = caseAddExternal(addExternal);
        if (result == null) result = caseAddEntity(addExternal);
        if (result == null) result = caseAdd(addExternal);
        if (result == null) result = caseOperations(addExternal);
        if (result == null) result = caseStatements(addExternal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.ADD_DATASTORE:
      {
        AddDatastore addDatastore = (AddDatastore)theEObject;
        T result = caseAddDatastore(addDatastore);
        if (result == null) result = caseAddEntity(addDatastore);
        if (result == null) result = caseAdd(addDatastore);
        if (result == null) result = caseOperations(addDatastore);
        if (result == null) result = caseStatements(addDatastore);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.ADD_FLOW:
      {
        AddFlow addFlow = (AddFlow)theEObject;
        T result = caseAddFlow(addFlow);
        if (result == null) result = caseAdd(addFlow);
        if (result == null) result = caseOperations(addFlow);
        if (result == null) result = caseStatements(addFlow);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.ADD_BOUNDARY:
      {
        AddBoundary addBoundary = (AddBoundary)theEObject;
        T result = caseAddBoundary(addBoundary);
        if (result == null) result = caseAdd(addBoundary);
        if (result == null) result = caseOperations(addBoundary);
        if (result == null) result = caseStatements(addBoundary);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.REMOVE:
      {
        Remove remove = (Remove)theEObject;
        T result = caseRemove(remove);
        if (result == null) result = caseOperations(remove);
        if (result == null) result = caseStatements(remove);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.MODIFY:
      {
        Modify modify = (Modify)theEObject;
        T result = caseModify(modify);
        if (result == null) result = caseOperations(modify);
        if (result == null) result = caseStatements(modify);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.RENAME:
      {
        Rename rename = (Rename)theEObject;
        T result = caseRename(rename);
        if (result == null) result = caseModify(rename);
        if (result == null) result = caseOperations(rename);
        if (result == null) result = caseStatements(rename);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.RE_ID:
      {
        ReID reID = (ReID)theEObject;
        T result = caseReID(reID);
        if (result == null) result = caseModify(reID);
        if (result == null) result = caseOperations(reID);
        if (result == null) result = caseStatements(reID);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.CHANGE_DESCRIPTION:
      {
        ChangeDescription changeDescription = (ChangeDescription)theEObject;
        T result = caseChangeDescription(changeDescription);
        if (result == null) result = caseModify(changeDescription);
        if (result == null) result = caseOperations(changeDescription);
        if (result == null) result = caseStatements(changeDescription);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.FLOW_SOURCE:
      {
        FlowSource flowSource = (FlowSource)theEObject;
        T result = caseFlowSource(flowSource);
        if (result == null) result = caseModify(flowSource);
        if (result == null) result = caseOperations(flowSource);
        if (result == null) result = caseStatements(flowSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.FLOW_DESTINATION:
      {
        FlowDestination flowDestination = (FlowDestination)theEObject;
        T result = caseFlowDestination(flowDestination);
        if (result == null) result = caseModify(flowDestination);
        if (result == null) result = caseOperations(flowDestination);
        if (result == null) result = caseStatements(flowDestination);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.BOUNDARY_ADD_ENTITY:
      {
        BoundaryAddEntity boundaryAddEntity = (BoundaryAddEntity)theEObject;
        T result = caseBoundaryAddEntity(boundaryAddEntity);
        if (result == null) result = caseModify(boundaryAddEntity);
        if (result == null) result = caseOperations(boundaryAddEntity);
        if (result == null) result = caseStatements(boundaryAddEntity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.BOUNDARY_REMOVE_ENTITY:
      {
        BoundaryRemoveEntity boundaryRemoveEntity = (BoundaryRemoveEntity)theEObject;
        T result = caseBoundaryRemoveEntity(boundaryRemoveEntity);
        if (result == null) result = caseModify(boundaryRemoveEntity);
        if (result == null) result = caseOperations(boundaryRemoveEntity);
        if (result == null) result = caseStatements(boundaryRemoveEntity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.ROTATE_FLOW:
      {
        RotateFlow rotateFlow = (RotateFlow)theEObject;
        T result = caseRotateFlow(rotateFlow);
        if (result == null) result = caseModify(rotateFlow);
        if (result == null) result = caseOperations(rotateFlow);
        if (result == null) result = caseStatements(rotateFlow);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.MERGE_ENTITY:
      {
        MergeEntity mergeEntity = (MergeEntity)theEObject;
        T result = caseMergeEntity(mergeEntity);
        if (result == null) result = caseModify(mergeEntity);
        if (result == null) result = caseOperations(mergeEntity);
        if (result == null) result = caseStatements(mergeEntity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.MERGE_INTO_PROCESS:
      {
        MergeIntoProcess mergeIntoProcess = (MergeIntoProcess)theEObject;
        T result = caseMergeIntoProcess(mergeIntoProcess);
        if (result == null) result = caseMergeEntity(mergeIntoProcess);
        if (result == null) result = caseModify(mergeIntoProcess);
        if (result == null) result = caseOperations(mergeIntoProcess);
        if (result == null) result = caseStatements(mergeIntoProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.MERGE_INTO_EXTERNAL:
      {
        MergeIntoExternal mergeIntoExternal = (MergeIntoExternal)theEObject;
        T result = caseMergeIntoExternal(mergeIntoExternal);
        if (result == null) result = caseMergeEntity(mergeIntoExternal);
        if (result == null) result = caseModify(mergeIntoExternal);
        if (result == null) result = caseOperations(mergeIntoExternal);
        if (result == null) result = caseStatements(mergeIntoExternal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.MERGE_INTO_DATASTORE:
      {
        MergeIntoDatastore mergeIntoDatastore = (MergeIntoDatastore)theEObject;
        T result = caseMergeIntoDatastore(mergeIntoDatastore);
        if (result == null) result = caseMergeEntity(mergeIntoDatastore);
        if (result == null) result = caseModify(mergeIntoDatastore);
        if (result == null) result = caseOperations(mergeIntoDatastore);
        if (result == null) result = caseStatements(mergeIntoDatastore);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.SPLIT_ENTITY:
      {
        SplitEntity splitEntity = (SplitEntity)theEObject;
        T result = caseSplitEntity(splitEntity);
        if (result == null) result = caseModify(splitEntity);
        if (result == null) result = caseOperations(splitEntity);
        if (result == null) result = caseStatements(splitEntity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.FLOW_FIX:
      {
        FlowFix flowFix = (FlowFix)theEObject;
        T result = caseFlowFix(flowFix);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.SPLIT_PROCESS_AND_PROCESS:
      {
        SplitProcessAndProcess splitProcessAndProcess = (SplitProcessAndProcess)theEObject;
        T result = caseSplitProcessAndProcess(splitProcessAndProcess);
        if (result == null) result = caseSplitEntity(splitProcessAndProcess);
        if (result == null) result = caseModify(splitProcessAndProcess);
        if (result == null) result = caseOperations(splitProcessAndProcess);
        if (result == null) result = caseStatements(splitProcessAndProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.SPLITS_PROCESS_AND_DATASTORE:
      {
        SplitsProcessAndDatastore splitsProcessAndDatastore = (SplitsProcessAndDatastore)theEObject;
        T result = caseSplitsProcessAndDatastore(splitsProcessAndDatastore);
        if (result == null) result = caseSplitEntity(splitsProcessAndDatastore);
        if (result == null) result = caseModify(splitsProcessAndDatastore);
        if (result == null) result = caseOperations(splitsProcessAndDatastore);
        if (result == null) result = caseStatements(splitsProcessAndDatastore);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.SPLITS_DATASTORE_AND_PROCESS:
      {
        SplitsDatastoreAndProcess splitsDatastoreAndProcess = (SplitsDatastoreAndProcess)theEObject;
        T result = caseSplitsDatastoreAndProcess(splitsDatastoreAndProcess);
        if (result == null) result = caseSplitEntity(splitsDatastoreAndProcess);
        if (result == null) result = caseModify(splitsDatastoreAndProcess);
        if (result == null) result = caseOperations(splitsDatastoreAndProcess);
        if (result == null) result = caseStatements(splitsDatastoreAndProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.SPLIT_PROCESS_AND_EXTERNAL:
      {
        SplitProcessAndExternal splitProcessAndExternal = (SplitProcessAndExternal)theEObject;
        T result = caseSplitProcessAndExternal(splitProcessAndExternal);
        if (result == null) result = caseSplitEntity(splitProcessAndExternal);
        if (result == null) result = caseModify(splitProcessAndExternal);
        if (result == null) result = caseOperations(splitProcessAndExternal);
        if (result == null) result = caseStatements(splitProcessAndExternal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.SPLIT_EXTERNAL_AND_PROCESS:
      {
        SplitExternalAndProcess splitExternalAndProcess = (SplitExternalAndProcess)theEObject;
        T result = caseSplitExternalAndProcess(splitExternalAndProcess);
        if (result == null) result = caseSplitEntity(splitExternalAndProcess);
        if (result == null) result = caseModify(splitExternalAndProcess);
        if (result == null) result = caseOperations(splitExternalAndProcess);
        if (result == null) result = caseStatements(splitExternalAndProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.SPLIT_DATASTORE_AND_EXTERNAL:
      {
        SplitDatastoreAndExternal splitDatastoreAndExternal = (SplitDatastoreAndExternal)theEObject;
        T result = caseSplitDatastoreAndExternal(splitDatastoreAndExternal);
        if (result == null) result = caseSplitEntity(splitDatastoreAndExternal);
        if (result == null) result = caseModify(splitDatastoreAndExternal);
        if (result == null) result = caseOperations(splitDatastoreAndExternal);
        if (result == null) result = caseStatements(splitDatastoreAndExternal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.SPLIT_EXTERNAL_AND_DATASTORE:
      {
        SplitExternalAndDatastore splitExternalAndDatastore = (SplitExternalAndDatastore)theEObject;
        T result = caseSplitExternalAndDatastore(splitExternalAndDatastore);
        if (result == null) result = caseSplitEntity(splitExternalAndDatastore);
        if (result == null) result = caseModify(splitExternalAndDatastore);
        if (result == null) result = caseOperations(splitExternalAndDatastore);
        if (result == null) result = caseStatements(splitExternalAndDatastore);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.SPLIT_DATASTORE_AND_DATASTORE:
      {
        SplitDatastoreAndDatastore splitDatastoreAndDatastore = (SplitDatastoreAndDatastore)theEObject;
        T result = caseSplitDatastoreAndDatastore(splitDatastoreAndDatastore);
        if (result == null) result = caseSplitEntity(splitDatastoreAndDatastore);
        if (result == null) result = caseModify(splitDatastoreAndDatastore);
        if (result == null) result = caseOperations(splitDatastoreAndDatastore);
        if (result == null) result = caseStatements(splitDatastoreAndDatastore);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.SPLIT_EXTERNAL_AND_EXTERNAL:
      {
        SplitExternalAndExternal splitExternalAndExternal = (SplitExternalAndExternal)theEObject;
        T result = caseSplitExternalAndExternal(splitExternalAndExternal);
        if (result == null) result = caseSplitEntity(splitExternalAndExternal);
        if (result == null) result = caseModify(splitExternalAndExternal);
        if (result == null) result = caseOperations(splitExternalAndExternal);
        if (result == null) result = caseStatements(splitExternalAndExternal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.GROUPING:
      {
        Grouping grouping = (Grouping)theEObject;
        T result = caseGrouping(grouping);
        if (result == null) result = caseStatements(grouping);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.COUNTERMEASURE:
      {
        Countermeasure countermeasure = (Countermeasure)theEObject;
        T result = caseCountermeasure(countermeasure);
        if (result == null) result = caseGrouping(countermeasure);
        if (result == null) result = caseStatements(countermeasure);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.DESIGN:
      {
        Design design = (Design)theEObject;
        T result = caseDesign(design);
        if (result == null) result = caseGrouping(design);
        if (result == null) result = caseStatements(design);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.REFACTORING:
      {
        Refactoring refactoring = (Refactoring)theEObject;
        T result = caseRefactoring(refactoring);
        if (result == null) result = caseGrouping(refactoring);
        if (result == null) result = caseStatements(refactoring);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.TESTING:
      {
        Testing testing = (Testing)theEObject;
        T result = caseTesting(testing);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ThreatModelLanguagePackage.SKETCHING:
      {
        Sketching sketching = (Sketching)theEObject;
        T result = caseSketching(sketching);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatements(Statements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operations</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operations</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperations(Operations object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAdd(Add object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddEntity(AddEntity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddProcess(AddProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add External</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add External</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddExternal(AddExternal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add Datastore</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add Datastore</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddDatastore(AddDatastore object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add Flow</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add Flow</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddFlow(AddFlow object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add Boundary</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add Boundary</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddBoundary(AddBoundary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Remove</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Remove</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRemove(Remove object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Modify</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Modify</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModify(Modify object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rename</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rename</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRename(Rename object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Re ID</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Re ID</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReID(ReID object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Change Description</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Change Description</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChangeDescription(ChangeDescription object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Flow Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Flow Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFlowSource(FlowSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Flow Destination</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Flow Destination</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFlowDestination(FlowDestination object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boundary Add Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boundary Add Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoundaryAddEntity(BoundaryAddEntity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boundary Remove Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boundary Remove Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoundaryRemoveEntity(BoundaryRemoveEntity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rotate Flow</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rotate Flow</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRotateFlow(RotateFlow object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Merge Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Merge Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMergeEntity(MergeEntity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Merge Into Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Merge Into Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMergeIntoProcess(MergeIntoProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Merge Into External</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Merge Into External</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMergeIntoExternal(MergeIntoExternal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Merge Into Datastore</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Merge Into Datastore</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMergeIntoDatastore(MergeIntoDatastore object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Split Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Split Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSplitEntity(SplitEntity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Flow Fix</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Flow Fix</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFlowFix(FlowFix object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Split Process And Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Split Process And Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSplitProcessAndProcess(SplitProcessAndProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Splits Process And Datastore</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Splits Process And Datastore</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSplitsProcessAndDatastore(SplitsProcessAndDatastore object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Splits Datastore And Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Splits Datastore And Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSplitsDatastoreAndProcess(SplitsDatastoreAndProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Split Process And External</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Split Process And External</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSplitProcessAndExternal(SplitProcessAndExternal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Split External And Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Split External And Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSplitExternalAndProcess(SplitExternalAndProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Split Datastore And External</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Split Datastore And External</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSplitDatastoreAndExternal(SplitDatastoreAndExternal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Split External And Datastore</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Split External And Datastore</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSplitExternalAndDatastore(SplitExternalAndDatastore object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Split Datastore And Datastore</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Split Datastore And Datastore</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSplitDatastoreAndDatastore(SplitDatastoreAndDatastore object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Split External And External</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Split External And External</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSplitExternalAndExternal(SplitExternalAndExternal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Grouping</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Grouping</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGrouping(Grouping object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Countermeasure</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Countermeasure</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCountermeasure(Countermeasure object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Design</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Design</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDesign(Design object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Refactoring</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Refactoring</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRefactoring(Refactoring object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Testing</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Testing</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTesting(Testing object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sketching</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sketching</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSketching(Sketching object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //ThreatModelLanguageSwitch
