/*
 * generated by Xtext 2.33.0
 */
package xtext.validation;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.eclipse.xtext.validation.Check;

import xtext.threatModelLanguage.AddBoundary;
import xtext.threatModelLanguage.AddEntity;
import xtext.threatModelLanguage.AddFlow;
import xtext.threatModelLanguage.BoundaryAddEntity;
import xtext.threatModelLanguage.BoundaryRemoveEntity;
import xtext.threatModelLanguage.FlowDestination;
import xtext.threatModelLanguage.FlowSource;
import xtext.threatModelLanguage.MergeEntity;
import xtext.threatModelLanguage.Rename;
import xtext.threatModelLanguage.ThreatModelLanguagePackage;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class ThreatModelLanguageValidator extends AbstractThreatModelLanguageValidator {
	
	
	//Add
	@Check
	public void flowSourceCanNotBeDestination(AddFlow flow) {
		if(flow.getSourceId().equals(flow.getDestinationId())) {
			error("The Source and Destination of a flow can not be the same",ThreatModelLanguagePackage.Literals.ADD_FLOW__SOURCE_ID);
		}
	}
	
	
	@Check
	public void entitiesOfBoundaryAreUnique(AddBoundary boundary) {
		
		Set<String> set = new HashSet<String>(boundary.getEntities());
		
		if(set.size() < boundary.getEntities().size()){
			error("The the entities have to be unique.", ThreatModelLanguagePackage.Literals.ADD_BOUNDARY__ENTITIES);
		}
	}
	
	//Rename
	@Check
	public void newNameCanNotBeOld(Rename rename) {
		if(rename.getId().equals(rename.getNewName())) {
			error("Renaming an element into an old name is not a valid statement.",ThreatModelLanguagePackage.Literals.RENAME__NEW_NAME);
		}
	}
	/*
	@Check
	public void addeBoundaryEntityIsValidStatement(BoundaryAddEntity boundary) {
		if(boundary. ().contains(boundary.getNewEntity())){
			error("The entity " +boundary.getNewEntity().getName()+ " is allready in the trust boundary.", ThreatModelLanguagePackage.Literals.BOUNDARY_ADD_ENTITY__NEW_ENTITY);
		}
	}
	@Check
	public void removeBoundaryEntityIsValidStatement(BoundaryRemoveEntity boundary) {
		if(!boundary.getEntities().contains(boundary.getOldEntity())){
			error("The entity " +boundary.getOldEntity().getName()+ " is not in the trust boundary.", ThreatModelLanguagePackage.Literals.BOUNDARY_REMOVE_ENTITY__OLD_ENTITY);
		}
	}
	*/
	
	@Check
	public void mergeEntitiesCanNotBeTheSame(MergeEntity merge) {
		if(merge.getEntity1().equals(merge.getEntity2())){
			error("Merging the same entity is not a valid statement;", ThreatModelLanguagePackage.Literals.MERGE_ENTITY__ENTITY2);
		}
	}
	
//MergeEntity
	
//	public static final String INVALID_NAME = "invalidName";
//
//	@Check
//	public void checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.getName().charAt(0))) {
//			warning("Name should start with a capital",
//					ThreatModelLanguagePackage.Literals.GREETING__NAME,
//					INVALID_NAME);
//		}
//	}
	
}
